name: Test, build and deploy

on:
  push: {}
  pull_request: {}
  schedule:
    - cron: '0 0 * * *'

env:
  STREAMLINK_DIST_DIR: ${{ github.workspace }}/dist
  SIGNING_KEY_ID: 2E390FA0
  SIGNING_KEY_FILE: ${{ github.workspace }}/signing.key
  DOCS_KEY_FILE: ${{ github.workspace }}/id_rsa_docs

jobs:
  test:
    name: Test
    strategy:
      fail-fast: false
      # please remember to change the `codecov.notify.after_n_builds` value in .codecov.yml
      # when changing the build matrix and changing the number of test runners
      matrix:
        os:
          - ubuntu-20.04
          - windows-latest
        python:
          - "3.6"
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
        # include:
        #   - python: "3.11-dev"
        #     os: ubuntu-20.04
        #     continue: true
        #   - python: "3.11-dev"
        #     os: windows-latest
        #     continue: true
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 300
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      - name: Install dependencies
        continue-on-error: ${{ matrix.continue || false }}
        run: bash ./script/install-dependencies.sh
      - name: Lint (flake8)
        continue-on-error: ${{ matrix.continue || false }}
        run: flake8 --count
      - name: Lint (line terminators)
        if: startsWith(matrix.os, 'ubuntu')
        run: "! grep 'with CRLF line terminators' <(git ls-files | file -nNf-)"
      - name: Lint (unicode bidirectional control characters)
        if: startsWith(matrix.os, 'ubuntu')
        run: "! git grep -EIn $'[\\u2066\\u2067\\u2068\\u2069\\u202A\\u202B\\u202C\\u202D\\u202E]'"
      - name: Lint (file permissions)
        if: startsWith(matrix.os, 'ubuntu')
        run: "! grep -Ev '^644' <(git ls-files src/ tests/ | xargs stat '--format=%a %n')"
      - name: Test
        continue-on-error: ${{ matrix.continue || false }}
        run: pytest -r a --cov --cov-branch --cov-report=xml --durations 10
      - name: Build shell completions
        run: bash ./script/build-shell-completions.sh
      - name: Upload coverage data
        if: github.event_name != 'schedule'
        continue-on-error: ${{ matrix.continue || false }}
        uses: codecov/codecov-action@v2
        with:
          name: os:${{ matrix.os }} py:${{ matrix.python }}

  documentation:
    name: Test docs
    if: github.event_name != 'schedule'
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 300
      - name: Fetch tags
        run: git fetch --depth=300 origin +refs/tags/*:refs/tags/*
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          ./script/install-dependencies.sh
          python -m pip install -r docs-requirements.txt
      - name: Build
        run: make --directory=docs html man

  version:
    name: Generate version number
    runs-on: ubuntu-20.04
    outputs:
      version: ${{ steps.getVersion.outputs.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Generate verison number
        id: getVersion
        run: echo ::set-output name=version::$(python setup.py --version | sed 's/+/_/')

  windows-installer:
    name: Windows installer
    runs-on: ubuntu-20.04
    needs:
      - version
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 300
      - name: Fetch tags
        run: git fetch --depth=300 origin +refs/tags/*:refs/tags/*
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          ./script/install-dependencies.sh
          python -m pip install wheel pynsist==2.7 distlib==0.3.3
          sudo apt update
          sudo apt install -y nsis imagemagick inkscape
      - name: Installer file name
        id: installer
        run: echo ::set-output name=filename::streamlink-${{ needs.version.outputs.version }}
      - name: Build
        run: ./script/makeinstaller.sh "${{ steps.installer.outputs.filename }}"
      - name: Upload artifact
        if: github.repository == 'streamlink/streamlink' && (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') || github.event_name == 'schedule')
        uses: actions/upload-artifact@v2-preview
        with:
          name: ${{ steps.installer.outputs.filename }}-win32
          path: ${{ env.STREAMLINK_DIST_DIR }}/${{ steps.installer.outputs.filename }}.exe

  deploy-documentation:
    name: Deploy docs
    if: github.repository == 'streamlink/streamlink' && github.event_name == 'push' && (github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/'))
    needs:
      - test
      - documentation
      - windows-installer
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 300
      - name: Fetch tags
        run: git fetch --depth=300 origin +refs/tags/*:refs/tags/*
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          ./script/install-dependencies.sh
          python -m pip install -r docs-requirements.txt
      - name: Build
        run: make --directory=docs html
      - name: Deploy
        env:
          DOCS_KEY_PASSPHRASE: ${{ secrets.DOCS_KEY_PASSPHRASE }}
        run: ./script/deploy-docs.sh

  release:
    name: New release
    if: github.repository == 'streamlink/streamlink' && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    needs:
      - version
      - deploy-documentation
    runs-on: ubuntu-20.04
    outputs:
      exeSha: ${{ steps.generateSha.outputs.exeSha }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 300
      - name: Fetch tags
        run: git fetch --depth=300 origin +refs/tags/*:refs/tags/*
      - uses: actions/setup-python@v1
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          ./script/install-dependencies.sh
          python -m pip install -r docs-requirements.txt
          python -m pip install --upgrade wheel twine
      - name: Build shell completions
        run: ./script/build-shell-completions.sh
      - name: Build man page
        run: make --directory=docs man
      - name: Installer file name
        id: installer
        run: echo ::set-output name=filename::streamlink-${{ needs.version.outputs.version }}
      - name: Download installer artifact
        uses: actions/download-artifact@v2-preview
        with:
          name: ${{ steps.installer.outputs.filename }}-win32
          path: ${{ env.STREAMLINK_DIST_DIR }}
      - name: sdist and wheels
        env:
          RELEASE_KEY_PASSPHRASE: ${{ secrets.RELEASE_KEY_PASSPHRASE }}
        run: ./script/build-and-sign.sh
      - name: Generate sha256 for chocolatey release
        id: generateSha
        run: |
          echo "::set-output name=exeSha::$(sha256sum "${STREAMLINK_DIST_DIR}/${{ steps.installer.outputs.filename }}.exe" | awk '{ print $1}')"
      - name: Github release
        env:
          RELEASES_API_KEY: ${{ secrets.RELEASES_API_KEY }}
        run: ./script/github_releases.py "${STREAMLINK_DIST_DIR}/"*{.exe,.tar.gz{,.asc}}
      - name: PyPI release
        env:
          PYPI_USER: streamlink
          PYPI_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: ./script/deploy-pypi.sh
  chocolatey:
    name: Chocolatey release
    needs:
      - release
      - version
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prepare nuspec and script files
        run: |
          $version = "${{ needs.version.outputs.version }}"
          (Get-Content -Path "./release/chocolatey/streamlink.nuspec") -replace "<!-- version number -->", "$version" | Set-Content "./release/chocolatey/streamlink.nuspec"
          (Get-Content -Path "./release/chocolatey/tools/chocolateyinstall.ps1") -replace "checksum      = '' # checksum", "checksum      = '${{  needs.release.outputs.exeSha  }}'" | Set-Content "./release/chocolatey/tools/chocolateyinstall.ps1"
        shell: pwsh

      - name: Package release
        working-directory: release/chocolatey
        run: |
          choco pack
        shell: pwsh
      - name: Push release
        working-directory: release/chocolatey
        run: |
          $version = "${{ needs.version.outputs.version }}"
          choco push --api-key ${{ secrets.CHOCOLATEY_API_KEY }} streamlink.$version.nupkg
